library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data.csv")
df_melt <- melt(df)
week <- as.numeric(df_melt$variable)
sample <- df_melt$Sample
values <- df_melt$value
p <- ggplot(df_melt, aes(group=1))
p <- p + geom_area(aes(x=week, y=values), fill=sample)
p
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data.csv")
df_melt <- melt(df)
week <- as.numeric(df_melt$variable)
sample <- as.numeric(df_melt$Sample)
values <- df_melt$value
p <- ggplot(df_melt, aes(group=1))
p <- p + geom_area(aes(x=week, y=values), fill=sample)
p
sample
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data.csv")
df_melt <- melt(df)
week <- df_melt$variable
sample <- df_melt$Sample
values <- as.character(df_melt$value)
p <- ggplot(df_melt, aes(group=1))
p <- p + geom_area(aes(x=week, y=values), fill=sample)
p
values
typeof(values)
typeof(week)
typeof(sample)
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data.csv")
df_melt <- melt(df)
week <- df_melt$variable
sample <- df_melt$Sample
values <- df_melt$value
p <- ggplot(df_melt, aes(group=1))
p <- p + geom_area(aes(x=week, y=values), fill=sample)
p
typeof(values)
typeof(sample)
typeof(week)
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c(Sample))
#week <- df_melt$variable
#sample <- df_melt$Sample
#values <- df_melt$value
#p <- ggplot(df_melt, aes(group=1))
#p <- p + geom_area(aes(x=week, y=values), fill=sample)
#p
df_melt
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c(Sample))
#week <- df_melt$variable
#sample <- df_melt$Sample
#values <- df_melt$value
#p <- ggplot(df_melt, aes(group=1))
#p <- p + geom_area(aes(x=week, y=values), fill=sample)
#p
df
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("Sample"))
#week <- df_melt$variable
#sample <- df_melt$Sample
#values <- df_melt$value
#p <- ggplot(df_melt, aes(group=1))
#p <- p + geom_area(aes(x=week, y=values), fill=sample)
#p
x
df_melt
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("Sample"))
p <- ggplot(df_melt, aes(x=value, y=variable,group=Sample, fill=Sample)) + geom_area(position="fill")
p
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("Sample"))
p <- ggplot(df_melt, aes(x=variable, y=value,group=Sample, fill=Sample)) + geom_area(position="fill")
p
df_melt
library(ggplot2)
library(reshape)
data=read.csv("Mo_data/out20",comment.char = "#",sep = "")
mdata=melt(data,id=c("Time"))
ggplot(mdata, aes(x=Time,y=value,group=variable,fill=variable)) + geom_area(position="fill")
library(ggplot2)
library(reshape)
data=read.csv("Mo_data/out20",comment.char = "#",sep = "")
mdata=melt(data,id=c("Time"))
ggplot(mdata, aes(x=Time,y=value,group=variable,fill=variable)) + geom_area(position="fill")
data
library(ggplot2)
library(reshape)
df=read.csv("Mo_data/out20",comment.char = "#",sep = "")
mdata=melt(df,id=c("Time"))
ggplot(mdata, aes(x=Time,y=value,group=variable,fill=variable)) + geom_area(position="fill")
getwd
getwd()
library(ggplot2)
library(reshape)
df=read.csv("Mo_data/out20.csv",comment.char = "#",sep = "")
mdata=melt(df,id=c("Time"))
ggplot(mdata, aes(x=Time,y=value,group=variable,fill=variable)) + geom_area(position="fill")
df
library(ggplot2)
library(reshape)
df=read.csv("Mo_data/out20.csv",comment.char = "#",sep = ",")
mdata=melt(df,id=c("Time"))
ggplot(mdata, aes(x=Time,y=value,group=variable,fill=variable)) + geom_area(position="fill")
mdata
clear
df
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("Sample"))
p <- ggplot(df_melt, aes(x=variable, y=value, group=Sample, fill=Sample)) + geom_area(position="fill")
p
df
df_melt
fill
Samplw
Sample
p
df_melt
library(ggplot2)
library(reshape)
df2=read.csv("Mo_data/out20.csv",comment.char = "#",sep = ",")
mdata=melt(df2,id=c("Time"))
ggplot(mdata, aes(x=Time,y=value,group=variable,fill=variable)) + geom_area(position="fill")
mdata
df2
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
p <- ggplot(df, aes(x=variable, y=value, group=Sample, fill=Sample)) + geom_area(position="fill")
p
df
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
p <- ggplot(df, aes(x=week, y=value, group=sample, fill=sample)) + geom_area(position="fill")
p
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
p <- ggplot(df, aes(x=week, y=value, group=group, fill=group)) + geom_area(position="fill")
p
df
df2
library(ggplot2)
library(reshape)
df2=read.csv("Mo_data/out20.csv",comment.char = "#",sep = ",")
mdata=melt(df2,id=c("Time"))
ggplot(mdata, aes(x=Time,y=value,group=variable,fill=variable)) + geom_area(position="fill")
df2
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("week"))
#p <- ggplot(df, aes(x=week, y=value, group=group, fill=group)) + geom_area(position="fill")
#p
df_melt
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("week"))
p <- ggplot(df, aes(x=week, y=value, group=group, fill=group)) + geom_area(position="fill")
p
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("week"))
p <- ggplot(df_melt, aes(x=week, y=value, group=group, fill=group)) + geom_area(position="fill")
p
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("week"))
p <- ggplot(df_melt, aes(x=week, y=value, group=variable, fill=variable)) + geom_area(position="fill")
p
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("week"))
p <- ggplot(df_melt, aes(x=week, y=value, group=variable, fill=variable)) + geom_area(position="fill")
p
library(ggplot2)
library(reshape)
df2=read.csv("Mo_data/out20.csv",comment.char = "#",sep = ",")
mdata=melt(df2,id=c("Time"))
ggplot(mdata, aes(x=Time,y=value,group=variable,fill=variable)) + geom_area(position="fill")
df2
df
mdata
df_melt
getwd()
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("week"))
df_melt$week <- as.factor(df_melt$week)
p1 <- ggplot() + geom_area(aes(y = value, x = week, fill = variable), data = df_melt)
p1
rm(list=ls())
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("week"))
p1 <- ggplot() + geom_area(aes(y = value, x = week, fill = variable), data = df_melt)
p1
+ scale_x_continuous(breaks= unique(df$week) )
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("week"))
p1 <- ggplot() + geom_area(aes(y = value, x = week, fill = variable), data = df_melt) + scale_x_continuous(breaks= unique(df$week) )
p1
+ scale_x_continuous(breaks= unique(df$week) )
+ scale_x_continuous(breaks= unique(df$week) )
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("week"))
p1 <- ggplot() + geom_area(aes(y = value, x = week, fill = variable), data = df_melt) + scale_x_continuous(breaks= unique(df$week) + geom_line() + geom_point() + geom_hline(yintercept=0))
p1
+ scale_x_continuous(breaks= unique(df$week) )
library(reshape2)
library(ggplot2)
rm(list=ls())
df <- read.csv("Mo_data/mo_qpcr_data2.csv", comment.char = "#", sep=",")
df_melt <- melt(df, id=c("week"))
p1 <- ggplot() + geom_area(aes(y = value, x = week, fill = variable), data = df_melt) + scale_x_continuous(breaks= unique(df$week) )
p1
library(tidyverse)
library(RColorBrewer)
library(reshape2)
df_tg <- read.csv("tg_recipients.csv", header = TRUE, check.names = FALSE)
df_fl <- read.csv("fl_recipients.csv", header = TRUE, check.names = FALSE)
df_tg_melt <- melt(df_tg)
df_tg_melt[3] <- log2(df_tg_melt[3])
is.na(df_tg_melt)<-sapply(df_tg_melt, is.infinite)
df_tg_melt[is.na(df_tg_melt)]<- -8
df_fl_melt <- melt(df_fl)
df_fl_melt[3] <- log2(df_fl_melt[3])
is.na(df_fl_melt)<-sapply(df_fl_melt, is.infinite)
df_fl_melt[is.na(df_fl_melt)]<- -8
hm.palette <- colorRampPalette((brewer.pal(9,"Greens")), space='Lab')
hm.palette2 <- colorRampPalette((brewer.pal(6, "Reds")), space="Lab")
p_abundance_tg <- ggplot(df_tg_melt, aes(x = variable , y = OTU, fill = value)) + geom_tile() +
scale_fill_gradientn(colours = hm.palette(10)) + xlab(NULL) +
ylab(NULL) + theme(axis.text=element_text(size=7)) + theme(axis.text.y = element_blank())
p_abundance_tg
p_abundance_fl <- ggplot(df_fl_melt, aes(x = variable , y = OTU, fill = value)) + geom_tile() +
scale_fill_gradientn(colours = hm.palette(10)) + xlab(NULL) +
ylab(NULL) + theme(axis.text=element_text(size=7)) + theme(legend.position="none")
p_abundance_fl
df_tg_prev <- read.csv("tg_recipients_prevalence.csv", header = TRUE, check.names = FALSE)
df_fl_prev <- read.csv("fl_recipients_prevalence.csv", header = TRUE, check.names = FALSE)
tg_melt <- melt(df_tg_prev)
fl_melt <- melt(df_fl_prev)
p_prev_tg <- ggplot(tg_melt, aes(x = variable , y = OTU, fill = value)) + geom_tile() +
coord_fixed() + scale_fill_gradientn(colours = hm.palette2(10)) + xlab(NULL) +
ylab(NULL) + theme(axis.text=element_text(size=7)) + theme(axis.text.y = element_blank(),
axis.text.x = element_blank()) + theme(legend.position="none")
p_prev_tg
p_prev_fl <- ggplot(fl_melt, aes(x = variable , y = OTU, fill = value)) + geom_tile() +
coord_fixed() + scale_fill_gradientn(colours = hm.palette2(10)) + xlab(NULL) + ylab(NULL) +
theme(axis.text=element_text(size=7)) + theme(axis.text.y = element_blank(),
axis.text.x = element_blank())
p_prev_fl
setwd("C:/Users/PhD/ml_R/ml_R")
# function to check if requirede packages are installed and if not install missing packages
packages <- c("randomForest", "plyr", "rfUtilities", "caret", "ROCR")
InsPack <- function(pack)
{
if ((pack %in% installed.packages()) == FALSE) {
install.packages(pack,repos ="http://cloud.r-project.org/")
}
}
lapply(packages, InsPack)
lib <- lapply(packages, require, character.only = TRUE)
flag <- all(as.logical(lib))
if(!flag) { stop("
It was not possible to install all required R libraries properly.
Please check the installation of all required libraries manually.\n
Required libaries: randomForest, plyr, rfUtilities, caret, pROC")
}
####################################################################################################################################################
# Set working directory manually change accordingly
home <- "C:/Users/adam-/ml_R/ml_R/2.ML"
work <- "C:/Users/PhD/ml_R/ml_R/2.ML"
user <- "C:/Users/user/folder"
setwd(work)
####################################################################################################################################################
# load data
otu_table <- read.table("5wk_otu_0.25.csv", sep=",", header=T, row.names=1, stringsAsFactors=FALSE, comment.char="", check.names=FALSE)
metadata <- read.table("metadata_5wk.csv", sep=",", header=T, row.names=1, stringsAsFactors=TRUE, comment.char="", check.names=FALSE)
metadata_test <- read.table("metadata_asc.csv", sep=",", header=T, row.names=1, stringsAsFactors=TRUE, comment.char="", check.names=FALSE)
testing <- read.table('association_to_predict_0.25.csv', sep = ",",header=T, row.names=1, stringsAsFactors=FALSE, comment.char="", check.names=FALSE )
# scale pre-preprocessed training data (normalised relative abundance filtered 1% abundance in at least one sample) and merge phenotype column from metadata
otu_table_scaled <- scale(otu_table, center = TRUE, scale = TRUE)
otu_table_scaled_Phenotype <- data.frame(t(otu_table_scaled))
otu_table_scaled_Phenotype$Phenotype <- metadata[rownames(otu_table_scaled_Phenotype), "Phenotype"]
# # scale pre-preprocessed test data and merge phenotype column from metadata_test
testing_scaled <- scale(testing, center = TRUE, scale = TRUE)
testing_scaled_phenotype <- data.frame(t(testing_scaled))
testing_scaled_phenotype$Phenotype <- metadata_test[rownames(testing_scaled_phenotype), "Phenotype"]
# set random seed to 42
set.seed(42)
# set x and y
x <- otu_table_scaled_Phenotype[,1:(ncol(otu_table_scaled_Phenotype)-1)]
y <- otu_table_scaled_Phenotype[ , ncol(otu_table_scaled_Phenotype)]
# classify training set and test significance
RF_phenotype_classify <- randomForest( x=x , y=y , ntree=500, mtry = 13, importance=TRUE, proximities=TRUE  )
RF_phenotype_classify_sig <- rf.significance( x=RF_phenotype_classify ,  xdata=x , nperm=1000 , ntree=500)
RF_phenotype_classify
RF_phenotype_classify_sig
# get feature importance, sort by mean decrease in accuracy a
RF_phenotype_classify_importances <- as.data.frame( RF_phenotype_classify_sig$importance )
RF_phenotype_classify_importances$features <- rownames( RF_phenotype_classify_importances )
RF_phenotype_classify_importances_sorted <- arrange( RF_phenotype_classify_importances  , desc(MeanDecreaseAccuracy)  )
View(RF_phenotype_classify_importances_sorted)
# function to check if requirede packages are installed and if not install missing packages
packages <- c("randomForest", "plyr", "rfUtilities", "caret", "ROCR")
InsPack <- function(pack)
{
if ((pack %in% installed.packages()) == FALSE) {
install.packages(pack,repos ="http://cloud.r-project.org/")
}
}
lapply(packages, InsPack)
lib <- lapply(packages, require, character.only = TRUE)
flag <- all(as.logical(lib))
if(!flag) { stop("
It was not possible to install all required R libraries properly.
Please check the installation of all required libraries manually.\n
Required libaries: randomForest, plyr, rfUtilities, caret, pROC")
}
####################################################################################################################################################
# Set working directory manually change accordingly
home <- "C:/Users/adam-/ml_R/ml_R/2.ML"
work <- "C:/Users/PhD/ml_R/ml_R/2.ML"
user <- "C:/Users/user/folder"
setwd(work)
####################################################################################################################################################
# load data
otu_table <- read.table("5wk_otu_0.25.csv", sep=",", header=T, row.names=1, stringsAsFactors=FALSE, comment.char="", check.names=FALSE)
metadata <- read.table("metadata_5wk.csv", sep=",", header=T, row.names=1, stringsAsFactors=TRUE, comment.char="", check.names=FALSE)
metadata_test <- read.table("metadata_asc.csv", sep=",", header=T, row.names=1, stringsAsFactors=TRUE, comment.char="", check.names=FALSE)
testing <- read.table('association_to_predict_0.25.csv', sep = ",",header=T, row.names=1, stringsAsFactors=FALSE, comment.char="", check.names=FALSE )
# scale pre-preprocessed training data (normalised relative abundance filtered 1% abundance in at least one sample) and merge phenotype column from metadata
otu_table_scaled <- scale(otu_table, center = TRUE, scale = TRUE)
otu_table_scaled_Phenotype <- data.frame(t(otu_table_scaled))
otu_table_scaled_Phenotype$Phenotype <- metadata[rownames(otu_table_scaled_Phenotype), "Phenotype"]
# # scale pre-preprocessed test data and merge phenotype column from metadata_test
testing_scaled <- scale(testing, center = TRUE, scale = TRUE)
testing_scaled_phenotype <- data.frame(t(testing_scaled))
testing_scaled_phenotype$Phenotype <- metadata_test[rownames(testing_scaled_phenotype), "Phenotype"]
# set random seed to 42
set.seed(42)
# set x and y
x <- otu_table_scaled_Phenotype[,1:(ncol(otu_table_scaled_Phenotype)-1)]
y <- otu_table_scaled_Phenotype[ , ncol(otu_table_scaled_Phenotype)]
# classify training set and test significance
RF_phenotype_classify <- randomForest( x=x , y=y , ntree=500, mtry = 13, importance=TRUE, proximities=TRUE  )
RF_phenotype_classify_sig <- rf.significance( x=RF_phenotype_classify ,  xdata=x , nperm=1000 , ntree=500)
RF_phenotype_classify
RF_phenotype_classify_sig
# get feature importance, sort by mean decrease in accuracy a
RF_phenotype_classify_importances <- as.data.frame( RF_phenotype_classify$importance )
RF_phenotype_classify_importances$features <- rownames( RF_phenotype_classify_importances )
RF_phenotype_classify_importances_sorted <- arrange( RF_phenotype_classify_importances  , desc(MeanDecreaseAccuracy)  )
View(RF_phenotype_classify_importances_sorted)
setwd("C:/Users/PhD/ml_R/ml_R/4.Plot_heatmap/12wk_caecal")
library(tidyverse)
library(RColorBrewer)
library(reshape2)
library(gtools)
# arcsine transform function
asinTransform <- function(p) { asin(sqrt(p/100)) }
# read input
df_mean <- read.csv("mean_12cc.csv", header = TRUE, check.names = FALSE)
df_prev <- read.csv("prev_12wkcc.csv", header = TRUE, check.names = FALSE)
# 0 values below threshold of 0.025
minval <- 0.025
df_mean[df_mean<minval]=0
# melt abundance df, apply arcsine transform and 0 NA
df_mean_melt <- melt(df_mean)
df_mean_melt[3] <- lapply(df_mean_melt[3], asinTransform)
df_mean_melt[is.na(df_mean_melt)]<- 0
# melt prevalence df
prev_melt <- melt(df_prev)
# set colour palette
hm.palette <- colorRampPalette(rev(brewer.pal(11,"RdYlGn")), space='Lab')
# plot abundance heatmap
p_abundance <- ggplot(df_mean_melt, aes(x = variable , y = OTU, fill = value)) + geom_tile() + coord_fixed(expand = FALSE) +
scale_fill_gradientn(colours = hm.palette(10)) + theme(legend.position = "left",legend.text = element_text(size = 6)) +
theme(axis.text = element_blank()) +
ylab(NULL) + xlab(NULL) +
geom_vline(xintercept = 1.5, color = "black")
print(p_abundance + labs(title= "Mean Abundance", subtitle = "NT    T")  +
theme(plot.title = element_text(hjust = 0.2, size = 11, face = "bold"),
plot.subtitle = element_text(size = 11),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.ticks = element_blank()))
# plot prevalence heatmap
p_prev <- ggplot(prev_melt, aes(x = variable , y = OTU, fill = value)) + geom_tile() + coord_fixed(expand = FALSE) +
scale_fill_gradientn(colours = hm.palette(10)) +  theme(legend.position = "right", legend.text = element_text(size = 6)) +
theme(axis.text.y =element_text(size = 11, hjust = -0.05 ), axis.text.x = element_blank()) +
xlab(NULL) + ylab(NULL) + geom_vline(xintercept = 1.5, color = "black")
print(p_prev + labs(title = "Prevalence", subtitle ="NT   T") +
theme(plot.title = element_text(hjust = 0.2, size = 11, face = "bold"),
plot.subtitle = element_text(size = 11),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.ticks = element_blank()))
library(tidyverse)
library(RColorBrewer)
library(reshape2)
library(gtools)
# arcsine transform function
asinTransform <- function(p) { asin(sqrt(p/100)) }
# read input
df_mean <- read.csv("mean_12cc.csv", header = TRUE, check.names = FALSE)
df_prev <- read.csv("prev_12wkcc.csv", header = TRUE, check.names = FALSE)
# 0 values below threshold of 0.025
minval <- 0.025
df_mean[df_mean<minval]=0
# melt abundance df, apply arcsine transform and 0 NA
df_mean_melt <- melt(df_mean)
df_mean_melt[3] <- lapply(df_mean_melt[3], asinTransform)
df_mean_melt[is.na(df_mean_melt)]<- 0
# melt prevalence df
prev_melt <- melt(df_prev)
# set colour palette
hm.palette <- colorRampPalette(rev(brewer.pal(11,"RdYlGn")), space='Lab')
# plot abundance heatmap
p_abundance <- ggplot(df_mean_melt, aes(x = variable , y = OTU, fill = value)) + geom_tile() + coord_fixed(expand = FALSE) +
scale_fill_gradientn(colours = hm.palette(10)) + theme(legend.position = "left",legend.text = element_text(size = 6)) +
theme(axis.text = element_blank()) +
ylab(NULL) + xlab(NULL) +
geom_vline(xintercept = 1.5, color = "black")
print(p_abundance + labs(title= "Mean Abundance", subtitle = "NT    T")  +
theme(plot.title = element_text(hjust = 0.2, size = 11, face = "bold"),
plot.subtitle = element_text(size = 11),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.ticks = element_blank()))
# plot prevalence heatmap
p_prev <- ggplot(prev_melt, aes(x = variable , y = OTU, fill = value)) + geom_tile() + coord_fixed(expand = FALSE) +
scale_fill_gradientn(colours = hm.palette(10)) +  theme(legend.position = "right", legend.text = element_text(size = 6)) +
theme(axis.text.y =element_text(size = 11, hjust = -0.05 ), axis.text.x = element_blank()) +
xlab(NULL) + ylab(NULL) + geom_vline(xintercept = 1.5, color = "black")
print(p_prev + labs(title = "Prevalence", subtitle ="NT   T") +
theme(plot.title = element_text(hjust = 0.2, size = 11, face = "bold"),
plot.subtitle = element_text(size = 11),
plot.margin = unit(c(0,0,0,0), "cm"),
axis.ticks = element_blank()))
